input {
  file {
    path => "/logs/nginx/access.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    type => "nginx"
  }
  file {
    path => "/logs/nginx/error.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    type => "nginx"
  }
  
  file {
    path => "/logs/django/django.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    type => "django"
  }
}

filter {
  if [type] == "nginx" {
    # modify to get path and referen url
    grok {
    match => { 
      "message" => '%{IPORHOST:clientip} - - \[%{HTTPDATE:timestamp}\] "%{WORD:request_method} %{URIPATHPARAM:request_path} HTTP/%{NUMBER:http_version}" %{NUMBER:status} %{NUMBER:bytes} "%{URI:referer}" "%{GREEDYDATA:user_agent}"'
    }
    }
    # normal log from NGINX
    grok {
      match => { "message" => "%{COMBINEDAPACHELOG}" }
    }
    date {
      match => ["timestamp", "dd/MMM/yyyy:HH:mm:ss Z"]
      target => "@timestamp"
    }
    geoip {
      source => "clientip"
    }

    mutate {
      rename => { "verb" => "request_method" }
      rename => { "response" => "status" }
      convert => { "status" => "integer" }
    }
  }

  if [type] == "django" {
    grok {
      match => { "message" => "%{SYSLOGTIMESTAMP:timestamp} %{HOSTNAME:host} %{WORD:program}[%{POSINT:pid}]: %{GREEDYDATA:message}" }
    }
    date {
      match => ["timestamp", "MMM  d HH:mm:ss"]
      target => "@timestamp"
    }
  }
}
# # basic output
# output {
#   elasticsearch {
#     hosts => ["http://elasticsearch:9200"]
#     index => "logsnew-%{+YYYY.MM.dd}"
#     user => "elastic"
#     password => "testpass"
#   }
# }

## add archive อีก folder 
output {
  # ส่งไปยัง Elasticsearch
  elasticsearch {
    hosts => ["http://elasticsearch:9200"]
    index => "logsnew-%{+YYYY.MM.dd}"
    user => "elastic"
    password => "testpass"
  }

  # บันทึก Logs ลงไฟล์ JSON ใน Local Volume
  file {
    path => "/logs/archive/nginx-%{+YYYY-MM-dd}.json"  # บันทึกเป็นไฟล์แยกตามวัน
    codec => json_lines  # บันทึก logs เป็น JSON
  }
}

