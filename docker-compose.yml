networks:
  transcendence:
    driver: bridge 

services:
  nginx:
    image: nginx
    container_name: nginx
    build:
      context: nginx
      dockerfile: Dockerfile
    ports:
      - "8443:8443"
      - "8980:8980"
    volumes:
      - ./frontend:/usr/share/nginx/html
      - media_volume:/usr/share/nginx/html/media
      - ./logs/nginx:/logs/nginx   # Mount logs directory for ELK
      - shared-data:/vault/token/
    networks:
      - transcendence
    depends_on:
      - web

  db:
    build: database
    container_name: database
    volumes:
      - ./data/db:/var/lib/postgresql/data
      - shared-data:/vault/token/
    depends_on:
      - vault
    ports:
      - "5432:5432"
    networks:
      - transcendence
  
  web:
    build:
      context: ./back
      dockerfile: Dockerfile
    container_name: backend
    restart: always
    volumes:
      - ./back:/back
      - media_volume:/back/transcendence/media
      - ./logs/django:/logs/django   # Mount logs directory for ELK
      - shared-data:/vault/token
    ports:
      - "8000:8000"
    depends_on:
      - db
      - vault
    networks:
      - transcendence

  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080
    depends_on:
      - db
    networks:
      - transcendence
  
  vault:
    build: ./vault
    container_name: vault
    restart: unless-stopped
    cap_add:
      - IPC_LOCK
    environment:
      VAULT_ADDR: "http://localhost:8200"
    env_file:
      - ${PWD}/.env
    ports:
      - "8200:8200"
    volumes:
      - shared-data:/vault/token/
    networks:
      transcendence:
        aliases:
          - vault

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus:/etc/prometheus
    networks:
      - transcendence

  grafana:
    container_name: grafana
    build: grafana
    ports:
      - "3000:3000"
    networks:
      - transcendence
    volumes:
      - ./grafana/dashboards:/var/lib/grafana/dashboards/
      - ./grafana/provisioning:/etc/grafana/provisioning/
      - shared-data:/vault/token/
    depends_on:
      - prometheus
      - db
    restart: always

  node_exporter:
    image: prom/node-exporter:latest
    container_name: node_exporter
    restart: always
    ports:
      - "9101:9101"
    networks:
      - transcendence

  postgres_exporter:
    build: prometheus/postgres_exporter
    container_name: postgres_exporter
    restart: always
    ports:
      - "9187:9187"
    networks:
      - transcendence
    volumes:
      - shared-data:/vault/token/
    depends_on:
      - db

  nginx_exporter:
    image: nginx/nginx-prometheus-exporter:latest
    container_name: nginx_exporter
    ports:
      - "9113:9113"
    command:
    - '--nginx.scrape-uri=https://nginx:8443/status'
    networks:
      - transcendence
    depends_on:
      - nginx

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node  # This is required for single-node setups
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}  # Set your Elasticsearch password
      - xpack.security.enabled=true # turn on login kibana
    volumes:
      - esdata:/usr/share/elasticsearch/data  # Persistent volume for Elasticsearch data
      - ./elasticsearch:/usr/share/elasticsearch/data  # Mount the script 
    ports:
      - "9200:9200"  # Expose the port for accessing Elasticsearch's API
    networks:
      - transcendence

  logstash:
    image: docker.elastic.co/logstash/logstash:7.10.0
    container_name: logstash
    environment:
      - LOGSTASH_PASSWORD=${LOGSTASH_PASSWORD}  # Set password for Logstash if needed
    volumes:
      - ./logstash/config:/usr/share/logstash/config  # Mount config files (including pipelines.yml)
      - ./logstash/pipeline:/usr/share/logstash/pipeline  # Mount pipeline configuration files (like logstash.conf)
      - ./logs/nginx:/logs/nginx
      - ./logs/django:/logs/django
      - ./logs/archive:/logs/archive 
    ports:
      - "5044:5044"  # Default port for Logstash input (Beats)
    networks:
      - transcendence
    depends_on:
      - elasticsearch
  kibana:
    image: docker.elastic.co/kibana/kibana:7.10.0  # Use the official Kibana image
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=${ELASTICSEARCH_USERNAME} 
      - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}   # The password for Elasticsearch
      - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${KIBANA_KEYGEN}
      - XPACK_SECURITY_ENABLED=true  # Enable security
      - XPACK_SECURITY_AUTHC_REALMS_NATIVE1_ENABLED=true  # Enable native authentication
    volumes:
      - ./kibana/index-pattern.json:/usr/share/kibana/config/index-pattern.json
      - ./kibana/entrypoint.sh:/usr/share/kibana/config/entrypoint.sh
      - ./kibana/data:/usr/share/kibana/data  # Persistent Kibana storage
    ports:
      - "5601:5601"  # Expose Kibana's web interface
    networks:
      - transcendence
    depends_on:
      - elasticsearch
  alpine-setup:
    image: alpine:latest
    container_name: alpine-setup
    entrypoint: ["/bin/sh", "-c", "/usr/share/kibana/data/start.sh"]
    volumes:
      - ./kibana/data:/usr/share/kibana/data  # Mount your Kibana directory that contains import.sh
    depends_on:
      - kibana
    networks:
      - transcendence
    restart: "no"  # Do not restart this service after the script completes
    
volumes:
  media_volume:
  esdata:
    driver: local
  shared-data:
  kibana-data:
